import express from "express";
import bcrypt from "bcrypt";
import User from "../models/User.js";
import Restaurant from "../models/Restaurant.js";

const router = express.Router();

// ðŸŸ¢ POST /login
router.post('/login', async (req, res) => {
  const { email, password } = req.body;

  try {
    const user = await User.findOne({ email });

    if (!user) {
      return res.status(401).json({ message: "Invalid email or password" });
    }

    const isMatch = await bcrypt.compare(password, user.password);

    if (!isMatch) {
      return res.status(401).json({ message: "Invalid email or password" });
    }

    return res.json(user);
  } catch (error) {
    console.error("Login Error:", error);
    return res.status(500).json({ message: "Server Error" });
  }
});

// ðŸŸ¢ POST /register
router.post('/register', async (req, res) => {
  const {
    username,
    email,
    usertype,
    password,
    restaurantAddress,
    restaurantImage
  } = req.body;

  try {
    const existingUser = await User.findOne({ email });

    if (existingUser) {
      return res.status(400).json({ message: "User already exists" });
    }

    const hashedPassword = await bcrypt.hash(password, 10);

    if (usertype === "restaurant") {
      const newUser = new User({
        username,
        email,
        usertype,
        password: hashedPassword,
        approval: "pending"
      });

      const user = await newUser.save();

      const restaurant = new Restaurant({
        ownerId: user._id,
        title: username,
        address: restaurantAddress,
        image: restaurantImage,
        menu: []
      });

      await restaurant.save();

      return res.status(201).json(user);
    } else {
      const newUser = new User({
        username,
        email,
        usertype,
        password: hashedPassword,
        approval: "approved"
      });

      const userCreated = await newUser.save();

      return res.status(201).json(userCreated);
    }
  } catch (error) {
    console.error("Registration Error:", error);
    return res.status(500).json({ message: "Server Error" });
  }
});

export default router;
